{"version":3,"sources":["webpack:///src/app/shared/guards/auth.guard.ts","webpack:///src/app/shared/services/common.service.ts"],"names":["AuthGuard","router","toastr","api","next","state","isLoggedIn","navigate","providedIn","CommonService","spinner","http","oderStatus","storeOderStatus","dropSetting","singleSelection","idField","textField","selectAllText","unSelectAllText","itemsShowLimit","allowSearchFilter","singleDropSetting","enableCheckAll","currencyOptions","code","symbol","getCountryCode","get","pipe","response","show","hide"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAQaA,SAAS;AAIrB,2BACSC,MADT,EAESC,MAFT,EAGSC,GAHT,EAGwB;AAAA;;AAFf,eAAAF,MAAA,GAAAA,MAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,GAAA,GAAAA,GAAA;AAEJ;;AATgB;AAAA;AAAA,sCAYpBC,IAZoB,EAapBC,KAboB,EAaM;AAC1B,gBAAI,KAAKF,GAAL,CAASG,UAAT,EAAJ,EAA2B;AAC1B,qBAAO,IAAP;AACA,aAFD,MAGK;AACJ,mBAAKL,MAAL,CAAYM,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACA;AACD;AApBoB;;AAAA;AAAA,S;;;;gBAPb;;gBAEA;;gBACA;;;;AAIIP,eAAS,eADrB,iEAAW;AAAEQ,kBAAU,EAAE;AAAd,OAAX,CACqB,E,iCAKJ,sD,EACA,wD,EACH,gE,EAPO,GAATR,SAAS,CAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCNb;;;UAOaS,aAAa;AA4BxB,+BACUC,OADV,EAEUC,IAFV,EAE0B;AAAA;;AADhB,eAAAD,OAAA,GAAAA,OAAA;AACA,eAAAC,IAAA,GAAAA,IAAA;AA7BV,eAAAC,UAAA,GAAqB,SAArB;AACA,eAAAC,eAAA,GAA0B,SAA1B;AACA,eAAAC,WAAA,GAAc;AACZC,2BAAe,EAAE,KADL;AAEZC,mBAAO,EAAE,KAFG;AAGZC,qBAAS,EAAE,MAHC;AAIZC,yBAAa,EAAE,YAJH;AAKZC,2BAAe,EAAE,cALL;AAMZC,0BAAc,EAAE,CANJ;AAOZC,6BAAiB,EAAE;AAPP,WAAd;AASA,eAAAC,iBAAA,GAAoB;AAClBC,0BAAc,EAAE,KADE;AAElBR,2BAAe,EAAE,IAFC;AAGlBC,mBAAO,EAAE,KAHS;AAIlBC,qBAAS,EAAE,MAJO;AAKlBC,yBAAa,EAAE,YALG;AAMlBC,2BAAe,EAAE,cANC;AAOlBC,0BAAc,EAAE,CAPE;AAQlBC,6BAAiB,EAAE;AARD,WAApB;AAUA,eAAAG,eAAA,GAAkB,CAChB;AAAEC,gBAAI,EAAE,KAAR;AAAeC,kBAAM,EAAE;AAAvB,WADgB,EAEhB;AAAED,gBAAI,EAAE,KAAR;AAAeC,kBAAM,EAAE;AAAvB,WAFgB,EAGhB;AAAED,gBAAI,EAAE,MAAR;AAAgBC,kBAAM,EAAE;AAAxB,WAHgB,CAAlB;AAUE,eAAKC,cAAL;AACD;;AAjCuB;AAAA;AAAA,2CAoCP;AACf,mBAAO,KAAKhB,IAAL,CACJiB,GADI,CACU,8BADV,EAEJC,IAFI,CAEC,2DAAI,UAAAC,QAAQ;AAAA,qBAAIA,QAAJ;AAAA,aAAZ,CAFD,CAAP;AAGD;AAxCuB;AAAA;AAAA,wCA0CV;AACZ,iBAAKpB,OAAL,CAAaqB,IAAb;AACD;AA5CuB;AAAA;AAAA,wCA6CV;AACZ,iBAAKrB,OAAL,CAAasB,IAAb;AACD;AA/CuB;;AAAA;AAAA,S;;;;gBARjB;;gBAEa;;;;AAMTvB,mBAAa,eAHzB,iEAAW;AACVD,kBAAU,EAAE;AADF,OAAX,CAGyB,E,iCA6BL,6D,EACH,+D,EA9BQ,GAAbC,aAAa,CAAb","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from '../services/api.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n\tmenuItemArray: any;\r\n\tbacktoDashboard: boolean;\r\n\tadminData: any;\r\n\tconstructor(\r\n\t\tprivate router: Router,\r\n\t\tprivate toastr: ToastrService,\r\n\t\tprivate api: ApiService,\r\n\r\n\t) { }\r\n\r\n\tcanActivate(\r\n\t\tnext: ActivatedRouteSnapshot,\r\n\t\tstate: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\t\tif (this.api.isLoggedIn()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.router.navigate(['/login']);\r\n\t\t}\r\n\t}\r\n\t// canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\t//     if (!localStorage.getItem('admin') && (state.url !== '/' && state.url !== '/forgotPassword'\r\n\t//         && state.url !== '/changePassword' && state.url !== '/reset-password')) {\r\n\t//         this.router.navigateByUrl('/');\r\n\t//         return false;\r\n\t//     } else if (localStorage.getItem('admin')) {\r\n\t//         this.adminData = JSON.parse(localStorage.getItem('admin'));\r\n\t//         if ((this.adminData.role.slug != 'super_admin') && (this.adminData.role.permissions.indexOf(next.data.key) == -1)) {\r\n\t//             this.toastr.warning(`You don't have access to this page`)\r\n\t//             this.router.navigateByUrl('/dashboard');\r\n\t//             return false\r\n\t//         }\r\n\r\n\t//         if (state.url === '/') {\r\n\t//             this.router.navigateByUrl('/dashboard');\r\n\t//         }\r\n\t//         if (localStorage.getItem('menuItemArray')) {\r\n\t//             const checkUrl = state.url.split('/');\r\n\t//             const url = checkUrl[1];\r\n\t//             this.backtoDashboard = true;\r\n\t//             this.menuItemArray = JSON.parse(localStorage.getItem('menuItemArray'));\r\n\t//             for (const i of this.menuItemArray) {\r\n\t//                 if ((i.state === url) && i.value === true) {\r\n\t//                     if (this.adminData.role === 'subAdmin' && checkUrl && checkUrl.length && checkUrl.length > 2) {\r\n\t//                         if (i.create === false && (checkUrl[2]).includes('add-')) {\r\n\t//                             this.backtoDashboard = true;\r\n\t//                         } else if (i.update === false && (checkUrl[2]).includes('edit-')) {\r\n\t//                             this.backtoDashboard = true;\r\n\t//                         } else {\r\n\t//                             this.backtoDashboard = false;\r\n\t//                         }\r\n\t//                     } else {\r\n\t//                         this.backtoDashboard = false;\r\n\t//                     }\r\n\t//                     break;\r\n\t//                 }\r\n\t//             }\r\n\r\n\t//             if (this.backtoDashboard === true) {\r\n\t//                 this.router.navigateByUrl('/dashboard');\r\n\t//             }\r\n\t//         }\r\n\t//     }\r\n\r\n\t//     return true;\r\n\t// }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\n// import { ApiService } from \"../api/api.service\";\r\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class CommonService {\r\n  oderStatus: string = \"pending\";\r\n  storeOderStatus: string = \"pending\";\r\n  dropSetting = {\r\n    singleSelection: false,\r\n    idField: \"_id\",\r\n    textField: \"name\",\r\n    selectAllText: \"Select All\",\r\n    unSelectAllText: \"UnSelect All\",\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  singleDropSetting = {\r\n    enableCheckAll: false,\r\n    singleSelection: true,\r\n    idField: \"_id\",\r\n    textField: \"name\",\r\n    selectAllText: \"Select All\",\r\n    unSelectAllText: \"UnSelect All\",\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  currencyOptions = [\r\n    { code: \"INR\", symbol: \"₹\" },\r\n    { code: \"USD\", symbol: \"$\" },\r\n    { code: \"Peso\", symbol: \"₱\" }\r\n  ]\r\n\r\n  constructor(\r\n    private spinner: NgxSpinnerService,\r\n    private http: HttpClient,\r\n  ) {\r\n    this.getCountryCode();\r\n  }\r\n\r\n\r\n  getCountryCode() {\r\n    return this.http\r\n      .get<Response>(\"assets/json/countryCode.json\")\r\n      .pipe(map(response => response));\r\n  }\r\n\r\n  showSpinner() {\r\n    this.spinner.show();\r\n  }\r\n  hideSpinner() {\r\n    this.spinner.hide();\r\n  }\r\n}\r\n"]}