{"version":3,"sources":["./src/app/shared/guards/auth.guard.ts","./src/app/shared/services/common.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AACiE;AAEjE;AACU;IAIxC,SAAS,SAAT,SAAS;IAIrB,YACS,MAAc,EACd,MAAqB,EACrB,GAAe;QAFf,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAe;QACrB,QAAG,GAAH,GAAG,CAAY;IAEpB,CAAC;IAEL,WAAW,CACV,IAA4B,EAC5B,KAA0B;QAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE;YAC1B,OAAO,IAAI,CAAC;SACZ;aACI;YACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SACjC;IACF,CAAC;CA+CD;;YA1EQ,sDAAM;YAEN,wDAAa;YACb,gEAAU;;AAIN,SAAS;IADrB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qCAMjB,sDAAM;QACN,wDAAa;QAChB,gEAAU;GAPZ,SAAS,CAmErB;AAnEqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRqB;AACK;AAChD,mDAAmD;AACY;AAC1B;IAKxB,aAAa,SAAb,aAAa;IA4BxB,YACU,OAA0B,EAC1B,IAAgB;QADhB,YAAO,GAAP,OAAO,CAAmB;QAC1B,SAAI,GAAJ,IAAI,CAAY;QA7B1B,eAAU,GAAW,SAAS,CAAC;QAC/B,oBAAe,GAAW,SAAS,CAAC;QACpC,gBAAW,GAAG;YACZ,eAAe,EAAE,KAAK;YACtB,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,MAAM;YACjB,aAAa,EAAE,YAAY;YAC3B,eAAe,EAAE,cAAc;YAC/B,cAAc,EAAE,CAAC;YACjB,iBAAiB,EAAE,IAAI;SACxB,CAAC;QACF,sBAAiB,GAAG;YAClB,cAAc,EAAE,KAAK;YACrB,eAAe,EAAE,IAAI;YACrB,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,MAAM;YACjB,aAAa,EAAE,YAAY;YAC3B,eAAe,EAAE,cAAc;YAC/B,cAAc,EAAE,CAAC;YACjB,iBAAiB,EAAE,IAAI;SACxB,CAAC;QACF,oBAAe,GAAG;YAChB,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC5B,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;YAC5B,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;SAC9B;QAMC,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAGD,cAAc;QACZ,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAW,8BAA8B,CAAC;aAC7C,IAAI,CAAC,0DAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrC,CAAC;IAED,WAAW;QACT,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IACD,WAAW;QACT,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;CACF;;YAxDQ,6DAAiB;YAEJ,+DAAU;;AAMnB,aAAa;IAHzB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;qCA8BmB,6DAAiB;QACpB,+DAAU;GA9Bf,aAAa,CAgDzB;AAhDyB","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from '../services/api.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n\tmenuItemArray: any;\r\n\tbacktoDashboard: boolean;\r\n\tadminData: any;\r\n\tconstructor(\r\n\t\tprivate router: Router,\r\n\t\tprivate toastr: ToastrService,\r\n\t\tprivate api: ApiService,\r\n\r\n\t) { }\r\n\r\n\tcanActivate(\r\n\t\tnext: ActivatedRouteSnapshot,\r\n\t\tstate: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\t\tif (this.api.isLoggedIn()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.router.navigate(['/login']);\r\n\t\t}\r\n\t}\r\n\t// canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\t//     if (!localStorage.getItem('admin') && (state.url !== '/' && state.url !== '/forgotPassword'\r\n\t//         && state.url !== '/changePassword' && state.url !== '/reset-password')) {\r\n\t//         this.router.navigateByUrl('/');\r\n\t//         return false;\r\n\t//     } else if (localStorage.getItem('admin')) {\r\n\t//         this.adminData = JSON.parse(localStorage.getItem('admin'));\r\n\t//         if ((this.adminData.role.slug != 'super_admin') && (this.adminData.role.permissions.indexOf(next.data.key) == -1)) {\r\n\t//             this.toastr.warning(`You don't have access to this page`)\r\n\t//             this.router.navigateByUrl('/dashboard');\r\n\t//             return false\r\n\t//         }\r\n\r\n\t//         if (state.url === '/') {\r\n\t//             this.router.navigateByUrl('/dashboard');\r\n\t//         }\r\n\t//         if (localStorage.getItem('menuItemArray')) {\r\n\t//             const checkUrl = state.url.split('/');\r\n\t//             const url = checkUrl[1];\r\n\t//             this.backtoDashboard = true;\r\n\t//             this.menuItemArray = JSON.parse(localStorage.getItem('menuItemArray'));\r\n\t//             for (const i of this.menuItemArray) {\r\n\t//                 if ((i.state === url) && i.value === true) {\r\n\t//                     if (this.adminData.role === 'subAdmin' && checkUrl && checkUrl.length && checkUrl.length > 2) {\r\n\t//                         if (i.create === false && (checkUrl[2]).includes('add-')) {\r\n\t//                             this.backtoDashboard = true;\r\n\t//                         } else if (i.update === false && (checkUrl[2]).includes('edit-')) {\r\n\t//                             this.backtoDashboard = true;\r\n\t//                         } else {\r\n\t//                             this.backtoDashboard = false;\r\n\t//                         }\r\n\t//                     } else {\r\n\t//                         this.backtoDashboard = false;\r\n\t//                     }\r\n\t//                     break;\r\n\t//                 }\r\n\t//             }\r\n\r\n\t//             if (this.backtoDashboard === true) {\r\n\t//                 this.router.navigateByUrl('/dashboard');\r\n\t//             }\r\n\t//         }\r\n\t//     }\r\n\r\n\t//     return true;\r\n\t// }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\n// import { ApiService } from \"../api/api.service\";\r\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class CommonService {\r\n  oderStatus: string = \"pending\";\r\n  storeOderStatus: string = \"pending\";\r\n  dropSetting = {\r\n    singleSelection: false,\r\n    idField: \"_id\",\r\n    textField: \"name\",\r\n    selectAllText: \"Select All\",\r\n    unSelectAllText: \"UnSelect All\",\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  singleDropSetting = {\r\n    enableCheckAll: false,\r\n    singleSelection: true,\r\n    idField: \"_id\",\r\n    textField: \"name\",\r\n    selectAllText: \"Select All\",\r\n    unSelectAllText: \"UnSelect All\",\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  currencyOptions = [\r\n    { code: \"INR\", symbol: \"₹\" },\r\n    { code: \"USD\", symbol: \"$\" },\r\n    { code: \"Peso\", symbol: \"₱\" }\r\n  ]\r\n\r\n  constructor(\r\n    private spinner: NgxSpinnerService,\r\n    private http: HttpClient,\r\n  ) {\r\n    this.getCountryCode();\r\n  }\r\n\r\n\r\n  getCountryCode() {\r\n    return this.http\r\n      .get<Response>(\"assets/json/countryCode.json\")\r\n      .pipe(map(response => response));\r\n  }\r\n\r\n  showSpinner() {\r\n    this.spinner.show();\r\n  }\r\n  hideSpinner() {\r\n    this.spinner.hide();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}